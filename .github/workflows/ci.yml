name: CI

on: [push, pull_request]

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        os: [ ubuntu-22.04 ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup SSH
        run: |
          mkdir -p $HOME/.ssh
          ssh-keygen -q -t rsa -N "" -f $HOME/.ssh/id_rsa
          cp $HOME/.ssh/id_rsa.pub $HOME/.ssh/authorized_keys
          ssh-keygen -b 2048 -t rsa -f ssh_host_rsa_key -q -N ""
          sed "s,\$PWD,$PWD,;s,\$USER,$USER,;s,\$HOME,$HOME," .github/workflows/sshd_config.tpl > sshd_config
          echo -n > sshd.log
          sudo /usr/sbin/sshd -f sshd_config -E sshd.log

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: install Qemu
        run: |
          uname -a
          sudo apt-get update -y
          sudo apt-get install -y qemu-system-x86

      - name: Install munet project
        run: poetry install -E ci --no-interaction

      - name: Lint the project
        run: make ci-lint

      - name: Verify json schema is up-to-date
        run: |
          make munet/munet-schema.json
          bash -c '[[ -z "$(git status -s --untracked=no)" ]]'

      - name: Run YANG tests
        run: make test-validate

      - name: Make sure podman image is present
        run: sudo podman pull docker.io/labn/docker-ci-test:20.04

      - name: Expose the environment
        run: |
          uname -a || true
          cat /etc/os-release || true
          cat /proc/meminfo || true
          cat /proc/cpuinfo || true

      - name: Run main tests
        run: |
          make test

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          verbose: true
          files: ./coverage.xml
          # fail_ci_if_error: false

      - name: Cleanup SSH
        if: always()
        run: |
          if [ -e sshd.pid ]; then
            sudo kill $(cat sshd.pid)
          fi

      - name: Collect test logs
        if: ${{ always() }}
        run: |
          sudo find /tmp/unet-test -type s -exec rm {} +
          mkdir -p test-logs
          sudo tar -C /tmp/unet-test -cf - . | tar -C test-logs -xf -
          tar -cjf test-logs.tar.bz2 test-logs

      - name: Archive test logs tarball
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-tar
          path: test-logs.tar.bz2
